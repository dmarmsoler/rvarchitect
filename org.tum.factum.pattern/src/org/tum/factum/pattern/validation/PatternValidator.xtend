/*
 * generated by Xtext 2.12.0
 */
package org.tum.factum.pattern.validation

import org.eclipse.xtext.validation.Check
import org.tum.factum.pattern.pattern.PatternPackage
import org.tum.factum.pattern.pattern.TermOperatorFunction

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class PatternValidator extends AbstractPatternValidator {
	
	//Validate Size of Term Inputs
	@Check
	def checkTermOperandsSize(TermOperatorFunction term) {
		if ( term.trmOperands.size != term.trmOperator.dtInput.size) {
			error("Invalid number of term operands: expected " + term.trmOperator.dtInput.size + ", not " + term.trmOperands.size + "!", 
					PatternPackage.Literals.TERM_OPERATOR_FUNCTION__TRM_OPERANDS)
		}
	}
//	@Check
//	def checkTermOperandsType(TermOperatorFunction trm) {
//		val tInput = trm.trmOperands.map[terms].map[it]
//		val dtListInput = trm.trmOperator.dtInput.map[it.name]
//		val filteredVars = (trm.eContainer as Pattern).ctaDtVars.dtVars.filter[e|dtListInput.filter[it == e.varSortType.name].size()>0]
//		
//		for (i : tInput) {
//			if (!Iterables.contains(filteredVars, i)) {
//				error('Term inputs should be the same sort type as operation input types', 
//					PatternPackage.Literals.TERM_OPERATOR_FUNCTION__TRM_OPERANDS)
//			}
//		}
//	}
}
