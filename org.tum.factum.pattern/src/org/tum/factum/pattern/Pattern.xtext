grammar org.tum.factum.pattern.Pattern with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore 

generate pattern "http://www.tum.org/factum/pattern/Pattern"

Pattern returns Pattern:
	{Pattern} 
	'Pattern' name=EString 
	'{'
		//('name' name=EString)?
		('comment' comment=EString)?

		//('patternConnections' '{' patternConnections+=Interface ( "," patternConnections+=Interface)* '}' )?
	
		('components' '{' components+=Component	( "," components+=Component)* '}' )?
	    ('hasInterfaces' '{' hasInterfaces+=Interface ( "," hasInterfaces+=Interface)* '}' )?
	    
	    //('containsInPorts' '{' containsInPorts+=InputPort ( "," containsInPorts+=InputPort)* '}' )?
	    //('containsOutPorts' '{' containsOutPorts+=OutputPort ( "," containsOutPorts+=OutputPort)* '}' )?
	    
	    ('archConstraints' '{' (archConstraints= AC | acFunction= ArchitectureConstraint?) ('act''('Component=[Component|EString]')')? '}' )?
	    
		('SubPattern' '{' SubPattern+=Pattern ( "," SubPattern+=Pattern)* '}' )?
	'}';



Component returns Component:
	{Component} 
	'Component' 
	name=EString	
	'{'
		('name' compID=CompID)?
		('comment' comment=EString)?
		
		('hasEdges' '{' hasEdges+=Interface ( "," hasEdges+=Interface)* '}' )?
			       
		//('iParameters' '{' iParameters+=InterfaceParameter ( "," iParameters+=InterfaceParameter)* '}' )?
		
	    ('inputPorts' '{' inputPorts+=InputPort ( "," inputPorts+=InputPort)* '}' )?
	    ('outputPorts' '{' outputPorts+=OutputPort ( "," outputPorts+=OutputPort)* '}' )?
	    
	    ('bAssertions' '{' (bAssertions= BA | btaFunction=BehaviorTraceAssertion?) '}' )?
	
	'}'
;

CompID:
	name=EString
;
	
Interface returns Interface:
	{Interface}	'Interface'	
	
	'{'
		('name' name=EString)?
		('comment' comment=EString)?
		//('hasEdges' '{' hasEdges+=Interface ( "," hasEdges+=Interface)* '}' )?
	    ('hasInput' hasInput=[InputPort])
	    //('portType' portType=[PortDataType|EString])?
	    ('hasOutput' hasOutput=[OutputPort])
	
	'}';


OutputPort returns OutputPort:
	{OutputPort} 
	'OutputPort' name=EString
	'('
		//('name' name=EString)?
		('comment' comment=EString)?
		('portType' portType=[PortDataType|EString])?
		//('connects' connects=[InputPort])
	    ('connects' connects=[InputPort])?
		
		//('outPortIsContained' outPortIsContained=[Component])
		
	')';
	
InputPort returns InputPort:
	{InputPort}	
	'InputPort' name=EString
	'('
		//('name' name=EString)?
		('comment' comment=EString)?
		('portType' portType=[PortDataType|EString])?
	    //('connects' connects=[OutputPort])?
		//('inPortIsContained' inPortIsContained=[Component])
	')'
	;
	
PortDataType returns PortDataType:
	{PortDataType} 
	//'PortDataType'
	//'('
		('name' name=EString)?
		('comment' comment=EString)?
		('type' type=EString)?
		//('outputPorts' outputPorts=[OutputPort|EString])?
		//('inputPorts' inputPorts=[OutputPort|EString])?
		('dataTypeAssertions' '(' dataTypeAssertions+=[DataTypeAssertion|EString] ( "," dataTypeAssertions+=[DataTypeAssertion|EString])* ')' )?
	//')'
	;
DataTypeAssertion returns DataTypeAssertion:
	{DataTypeAssertion}
	'DataTypeAssertion'
	'{'
		('name' name=EString)?
		('comment' comment=EString)?
	'}';

btaExpression:
	BehaviorTraceAssertion
; 

BehaviorTraceAssertion returns btaExpression:
	LtlOp '(' asertion=btaFunction ')'
;

btaFunction returns btaExpression:
	btaExpression |
	BA
;

BA:
	inputPortA=[InputPort|QualifiedName] '=' outputPortA=[OutputPort|QualifiedName]
;

acExpression:
	ArchitectureConstraint
;

ArchitectureConstraint	returns acExpression:
	LtlOp '(' asertion=archConstFunction ')'
	//( LtlOp '(' AC ')')? 
	//('act''('Component=[Component|EString]')')?
;

archConstFunction:
	acExpression |
	AC
;

AC:
	InputPort=[InputPort|QualifiedName] '=' OutputPort=[OutputPort|QualifiedName]
	
;

LtlOp:
	('G' | 'X' | 'F')
;

QualifiedName:
    ID ('.' ID)*
;
	
EString returns ecore::EString:
	STRING | ID
;

