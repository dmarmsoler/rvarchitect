grammar org.tum.factum.pattern.Pattern with org.eclipse.xtext.common.Terminals
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate pattern "http://www.tum.org/factum/pattern/Pattern"

Pattern returns Pattern:
	{Pattern} 
	'Pattern' name=ID 'ShortName' psname=ID
	'{'
		('DTSpec' '{' dtSpec+=DataTypeSpec( "," dtSpec+=DataTypeSpec)* '}' )?
		('ComponentTypes' '{' componentTypes+=ComponentType	( "," componentTypes+=ComponentType)* '}' )?
 
	    ('archConstraints' '{' 
	    	//(cmps+=Component ("," cmps+=Component)*)? 
	    	(ref+=Portref ("," ref+=Portref)*)
	    	(archConstraints= AC | acFunction= ArchitectureConstraint)? //Importnat - this line is stoping the above line 
	    	'}'
	    )?
		('SubPattern' '{' SubPattern+=Pattern ( "," SubPattern+=Pattern)* '}' )?
	'}'
;
ComponentType returns ComponentType:
	{ComponentType} 
	'CType'	name=EString ('ShortName' ctsname=ID)? 
	'{'
	    ('InputPorts' '{' inputPorts+=InputPort ( "," inputPorts+=InputPort)* '}' )?
	    ('OutputPorts' '{' outputPorts+=OutputPort ( "," outputPorts+=OutputPort)* '}' )?
	    
	    ('bAssertions' '{' 
	    	(btaDtVar+=DataTypeVariable ("," btaDtVar+=DataTypeVariable)*)?
	    	
	    	(bAssertions= BA | btaFunction=BehaviorTraceAssertion?) '}'
	    )?
	
	'}'
;
VariableStatus: 
	'rig' | 'flex'
;
ComponentVariable:
	VariableStatus	name=ID ':' cmptypAssigned=[ComponentType|ID]?
;
DataTypeVariable: 
	VariableStatus name=ID ':' varSortType=[Sort|QualifiedName]
;
Portref:
	cmp2=[ComponentVariable|ID] '.' p2=[InputPort|ID]	
   //cmp=[Component|ID] '.' (prt1=[InputPort|ID] | prt2=[OutputPort])
;
OutputPort returns OutputPort:
	{OutputPort} 
	'OutputPort' name=EString '(' 
		('Type' ':' outputPrtSrtTyp=[Sort|QualifiedName]) 
		('connects' connects+=[InputPort|QualifiedName]*)?
	')'
;
InputPort returns InputPort:
	{InputPort}	
	'InputPort' name=EString '('
		('Type' ':' inputPrtSrtTyp=[Sort|QualifiedName])
	    ('connects' connects+=[OutputPort|QualifiedName]*)?
	')'
;
DataTypeSpec returns DataTypeSpec:
	{DataTypeSpec}	
	'DT' name =ID	'('
		'Sort' (dtSorts+=Sort ("," dtSorts+=Sort)*)?
		('Operation' (dtOps+=Operation ("," dtOps+=Operation)*))?
		('Predicate' (dtPredicate+=DTPredicate ("," dtPredicate+=DTPredicate)*))?
		(sortName=[Sort|ID] 'generatedBy' (returnOps+=[Operation|ID] ("," returnOps+=[Operation|ID])*))?		
	')'
;
DTPredicate:
	name=ID ':' (pInput+=[Sort|QualifiedName] ("," pInput+=[Sort|QualifiedName])*)?
;
Operation:
	name=ID ':'  (dtInput+=[Sort|QualifiedName] ("," dtInput+=[Sort|QualifiedName])*)? '=>' (dtOutput=[Sort|QualifiedName])?
;
Sort:
	name=ID
;
btaExpression:
	BehaviorTraceAssertion
; 
BehaviorTraceAssertion returns btaExpression:
	LtlOp '(' asertion=btaFunction ')'
;
btaFunction returns btaExpression:
	btaExpression |
	BA
;
BA:
	inputPortA=[InputPort|QualifiedName] '=' outputPortA=[OutputPort|QualifiedName]
;
acExpression:
	ArchitectureConstraint
;
ArchitectureConstraint	returns acExpression:
	LtlOp '(' asertion=archConstFunction ')'
;
archConstFunction:
	acExpression |
	AC
;
AC:
	InputPort=[InputPort|QualifiedName] '=' OutputPort=[OutputPort|QualifiedName]
;
LtlOp:
	('G' | 'X' | 'F')
;
QualifiedName:
    ID ('.' ID)*
;
EString returns ecore::EString:
	STRING | ID
;
	
