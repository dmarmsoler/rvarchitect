Pattern PublisherSubscriber ShortName ps {
	
	DTSpec {
		DT Event (
			Sort EVT, ESET, MSG 
			Operation evt: MSG => EVT
			Predicate in: ESET, EVT
		), 
		DT Subscription ( 
			Sort SID, SBS
			Operation sub: SID,Event.EVT => SBS,
					  unsub: SID, Event.EVT => SBS
		)
	}  
	CTypes {
		CType Publisher ShortName pb {
			InputPorts {
				InputPort psb(Type: Subscription.SBS)
			}
			OutputPorts {
				OutputPort pnt(Type: Event.MSG) 
			} 
		},
		CType Subscriber ShortName sb {
			InputPorts { 
				InputPort snt(Type: Event.MSG) 
			}
			OutputPorts { 
				OutputPort ssb(Type: Subscription.SBS connects Publisher.psb ) 
			}
			Parameters {
				Parameter id(Type: Subscription.SID) 
			}
		} 
	} 
	//Container for Architectural Assumptions
	ArchSpec {
		//Component Variables
		rig p : Publisher,
		flex q: Publisher,
		rig s : Subscriber 
		
		//Data Type Variables  
		rig e: Event.EVT
		
		//Configuration Trace Assertions
    	act_pb: (G(cAct(p) ∧ (∀q. (cAct(q) ⇒ eq(q,p)))))  
		
		conn_sb: (G(cAct(p) ∧ val(p.psb, Subscription.sub(s.id,e))	⇒ ((cAct(s) ∧ cAct(p) ∧ e = Event.evt(p.pnt) ⇒ conn(p.pnt,s.snt)) W val(p.psb, Subscription.unsub(s.id,e)))))
	}
			
	//Container for Architectural Guarantees
	ArchGuarantee { 
		//Component Variables 
		flex p : Publisher, 
		rig  s : Subscriber 
	  
		//Data Type Variables 
		rig e: Event.EVT  
		 
		//Configuration Trace Assertions
		delivery: (G(cAct(s) ∧ val(s.ssb, Subscription.sub(s.id,e)) ⇒ ((cAct(s) ∧ e = Event.evt(p.pnt) ⇒ val(s.snt, p.pnt)) W (cAct(p) ∧ val(p.psb, Subscription.unsub(s.id,e))))))
		}
}